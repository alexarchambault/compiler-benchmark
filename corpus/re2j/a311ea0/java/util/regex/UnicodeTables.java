// AUTOGENERATED by make_unicode_tables.awk from the output of
// go/src/pkg/unicode/maketables.go.  Yes it's awful, but frankly
// it's quicker than porting 1300 more lines of Go.

package java.util.regex;

import java.util.HashMap;
import java.util.Map;

class UnicodeTables {
  static final int UpperCase = 0;
  static final int LowerCase = 1;
  static final int TitleCase = 2;
  static final int UpperLower = 0x110000;
  private static Map<String, int[][]> Categories() {
    Map<String, int[][]> map = new HashMap<String, int[][]>();
    map.put("Lm", Lm);
    map.put("Ll", Ll);
    map.put("C", C);
    map.put("M", M);
    map.put("L", L);
    map.put("N", N);
    map.put("P", P);
    map.put("S", S);
    map.put("Z", Z);
    map.put("Me", Me);
    map.put("Mc", Mc);
    map.put("Mn", Mn);
    map.put("Zl", Zl);
    map.put("Zp", Zp);
    map.put("Zs", Zs);
    map.put("Cs", Cs);
    map.put("Co", Co);
    map.put("Cf", Cf);
    map.put("Cc", Cc);
    map.put("Po", Po);
    map.put("Pi", Pi);
    map.put("Pf", Pf);
    map.put("Pe", Pe);
    map.put("Pd", Pd);
    map.put("Pc", Pc);
    map.put("Ps", Ps);
    map.put("Nd", Nd);
    map.put("Nl", Nl);
    map.put("No", No);
    map.put("So", So);
    map.put("Sm", Sm);
    map.put("Sk", Sk);
    map.put("Sc", Sc);
    map.put("Lu", Lu);
    map.put("Lt", Lt);
    map.put("Lo", Lo);
    return map;
  }
  private static final int[][] _Lm = make_Lm();
  private static int[][] make_Lm() {
    return new int[][] {};
  }
  private static final int[][] _Ll = make_Ll();
  private static int[][] make_Ll() {
    return new int[][] {};
  }
  private static final int[][] _C = make_C();
  private static int[][] make_C() {
    return new int[][] {};
  }
  private static final int[][] _M = make_M();
  private static int[][] make_M() {
    return new int[][] {};
  }
  private static final int[][] _L = make_L();
  private static int[][] make_L() {
    return new int[][] {};
  }
  private static final int[][] _N = make_N();
  private static int[][] make_N() {
    return new int[][] {};
  }
  private static final int[][] _P = make_P();
  private static int[][] make_P() {
    return new int[][] {};
  }
  private static final int[][] _S = make_S();
  private static int[][] make_S() {
    return new int[][] {};
  }
  private static final int[][] _Z = make_Z();
  private static int[][] make_Z() {
    return new int[][] {};
  }
  private static final int[][] _Me = make_Me();
  private static int[][] make_Me() {
    return new int[][] {};
  }
  private static final int[][] _Mc = make_Mc();
  private static int[][] make_Mc() {
    return new int[][] {};
  }
  private static final int[][] _Mn = make_Mn();
  private static int[][] make_Mn() {
    return new int[][] {};
  }
  private static final int[][] _Zl = make_Zl();
  private static int[][] make_Zl() {
    return new int[][] {};
  }
  private static final int[][] _Zp = make_Zp();
  private static int[][] make_Zp() {
    return new int[][] {};
  }
  private static final int[][] _Zs = make_Zs();
  private static int[][] make_Zs() {
    return new int[][] {};
  }
  private static final int[][] _Cs = make_Cs();
  private static int[][] make_Cs() {
    return new int[][] {};
  }
  private static final int[][] _Co = make_Co();
  private static int[][] make_Co() {
    return new int[][] {};
  }
  private static final int[][] _Cf = make_Cf();
  private static int[][] make_Cf() {
    return new int[][] {};
  }
  private static final int[][] _Cc = make_Cc();
  private static int[][] make_Cc() {
    return new int[][] {};
  }
  private static final int[][] _Po = make_Po();
  private static int[][] make_Po() {
    return new int[][] {};
  }
  private static final int[][] _Pi = make_Pi();
  private static int[][] make_Pi() {
    return new int[][] {};
  }
  private static final int[][] _Pf = make_Pf();
  private static int[][] make_Pf() {
    return new int[][] {};
  }
  private static final int[][] _Pe = make_Pe();
  private static int[][] make_Pe() {
    return new int[][] {};
  }
  private static final int[][] _Pd = make_Pd();
  private static int[][] make_Pd() {
    return new int[][] {};
  }
  private static final int[][] _Pc = make_Pc();
  private static int[][] make_Pc() {
    return new int[][] {};
  }
  private static final int[][] _Ps = make_Ps();
  private static int[][] make_Ps() {
    return new int[][] {};
  }
  private static final int[][] _Nd = make_Nd();
  private static int[][] make_Nd() {
    return new int[][] {};
  }
  private static final int[][] _Nl = make_Nl();
  private static int[][] make_Nl() {
    return new int[][] {};
  }
  private static final int[][] _No = make_No();
  private static int[][] make_No() {
    return new int[][] {};
  }
  private static final int[][] _So = make_So();
  private static int[][] make_So() {
    return new int[][] {};
  }
  private static final int[][] _Sm = make_Sm();
  private static int[][] make_Sm() {
    return new int[][] {};
  }
  private static final int[][] _Sk = make_Sk();
  private static int[][] make_Sk() {
    return new int[][] {};
  }
  private static final int[][] _Sc = make_Sc();
  private static int[][] make_Sc() {
    return new int[][] {};
  }
  private static final int[][] _Lu = make_Lu();
  private static int[][] make_Lu() {
    return new int[][] {};
  }
  private static final int[][] _Lt = make_Lt();
  private static int[][] make_Lt() {
    return new int[][] {};
  }
  private static final int[][] _Lo = make_Lo();
  private static int[][] make_Lo() {
    return new int[][] {};
  }
  static final int[][] Cc = _Cc;
  static final int[][] Cf = _Cf;
  static final int[][] Co = _Co;
  static final int[][] Cs = _Cs;
  static final int[][] Digit = _Nd;
  static final int[][] Nd = _Nd;
  static final int[][] Letter = _L;
  static final int[][] L = _L;
  static final int[][] Lm = _Lm;
  static final int[][] Lo = _Lo;
  static final int[][] Lower = _Ll;
  static final int[][] Ll = _Ll;
  static final int[][] Mark = _M;
  static final int[][] M = _M;
  static final int[][] Mc = _Mc;
  static final int[][] Me = _Me;
  static final int[][] Mn = _Mn;
  static final int[][] Nl = _Nl;
  static final int[][] No = _No;
  static final int[][] Number = _N;
  static final int[][] N = _N;
  static final int[][] Other = _C;
  static final int[][] C = _C;
  static final int[][] Pc = _Pc;
  static final int[][] Pd = _Pd;
  static final int[][] Pe = _Pe;
  static final int[][] Pf = _Pf;
  static final int[][] Pi = _Pi;
  static final int[][] Po = _Po;
  static final int[][] Ps = _Ps;
  static final int[][] Punct = _P;
  static final int[][] P = _P;
  static final int[][] Sc = _Sc;
  static final int[][] Sk = _Sk;
  static final int[][] Sm = _Sm;
  static final int[][] So = _So;
  static final int[][] Space = _Z;
  static final int[][] Z = _Z;
  static final int[][] Symbol = _S;
  static final int[][] S = _S;
  static final int[][] Title = _Lt;
  static final int[][] Lt = _Lt;
  static final int[][] Upper = _Lu;
  static final int[][] Lu = _Lu;
  static final int[][] Zl = _Zl;
  static final int[][] Zp = _Zp;
  static final int[][] Zs = _Zs;
  private static Map<String, int[][]> Scripts() {
    Map<String, int[][]> map = new HashMap<String, int[][]>();
    map.put("Katakana", Katakana);
    map.put("Malayalam", Malayalam);
    map.put("Phags_Pa", Phags_Pa);
    map.put("Inscriptional_Parthian", Inscriptional_Parthian);
    map.put("Latin", Latin);
    map.put("Inscriptional_Pahlavi", Inscriptional_Pahlavi);
    map.put("Osmanya", Osmanya);
    map.put("Khmer", Khmer);
    map.put("Inherited", Inherited);
    map.put("Telugu", Telugu);
    map.put("Samaritan", Samaritan);
    map.put("Bopomofo", Bopomofo);
    map.put("Imperial_Aramaic", Imperial_Aramaic);
    map.put("Kaithi", Kaithi);
    map.put("Mandaic", Mandaic);
    map.put("Old_South_Arabian", Old_South_Arabian);
    map.put("Kayah_Li", Kayah_Li);
    map.put("New_Tai_Lue", New_Tai_Lue);
    map.put("Tai_Le", Tai_Le);
    map.put("Kharoshthi", Kharoshthi);
    map.put("Common", Common);
    map.put("Kannada", Kannada);
    map.put("Old_Turkic", Old_Turkic);
    map.put("Tamil", Tamil);
    map.put("Tagalog", Tagalog);
    map.put("Brahmi", Brahmi);
    map.put("Arabic", Arabic);
    map.put("Tagbanwa", Tagbanwa);
    map.put("Canadian_Aboriginal", Canadian_Aboriginal);
    map.put("Tibetan", Tibetan);
    map.put("Coptic", Coptic);
    map.put("Hiragana", Hiragana);
    map.put("Limbu", Limbu);
    map.put("Egyptian_Hieroglyphs", Egyptian_Hieroglyphs);
    map.put("Avestan", Avestan);
    map.put("Myanmar", Myanmar);
    map.put("Armenian", Armenian);
    map.put("Sinhala", Sinhala);
    map.put("Bengali", Bengali);
    map.put("Greek", Greek);
    map.put("Cham", Cham);
    map.put("Hebrew", Hebrew);
    map.put("Meetei_Mayek", Meetei_Mayek);
    map.put("Saurashtra", Saurashtra);
    map.put("Hangul", Hangul);
    map.put("Runic", Runic);
    map.put("Deseret", Deseret);
    map.put("Lisu", Lisu);
    map.put("Sundanese", Sundanese);
    map.put("Glagolitic", Glagolitic);
    map.put("Oriya", Oriya);
    map.put("Buhid", Buhid);
    map.put("Ethiopic", Ethiopic);
    map.put("Javanese", Javanese);
    map.put("Syloti_Nagri", Syloti_Nagri);
    map.put("Vai", Vai);
    map.put("Cherokee", Cherokee);
    map.put("Ogham", Ogham);
    map.put("Batak", Batak);
    map.put("Syriac", Syriac);
    map.put("Gurmukhi", Gurmukhi);
    map.put("Tai_Tham", Tai_Tham);
    map.put("Ol_Chiki", Ol_Chiki);
    map.put("Mongolian", Mongolian);
    map.put("Hanunoo", Hanunoo);
    map.put("Cypriot", Cypriot);
    map.put("Buginese", Buginese);
    map.put("Bamum", Bamum);
    map.put("Lepcha", Lepcha);
    map.put("Thaana", Thaana);
    map.put("Old_Persian", Old_Persian);
    map.put("Cuneiform", Cuneiform);
    map.put("Rejang", Rejang);
    map.put("Georgian", Georgian);
    map.put("Shavian", Shavian);
    map.put("Lycian", Lycian);
    map.put("Nko", Nko);
    map.put("Yi", Yi);
    map.put("Lao", Lao);
    map.put("Linear_B", Linear_B);
    map.put("Old_Italic", Old_Italic);
    map.put("Tai_Viet", Tai_Viet);
    map.put("Devanagari", Devanagari);
    map.put("Lydian", Lydian);
    map.put("Tifinagh", Tifinagh);
    map.put("Ugaritic", Ugaritic);
    map.put("Thai", Thai);
    map.put("Cyrillic", Cyrillic);
    map.put("Gujarati", Gujarati);
    map.put("Carian", Carian);
    map.put("Phoenician", Phoenician);
    map.put("Balinese", Balinese);
    map.put("Braille", Braille);
    map.put("Han", Han);
    map.put("Gothic", Gothic);
    return map;
  }
  private static final int[][] _Katakana = make_Katakana();
  private static int[][] make_Katakana() {
    return new int[][] {};
  }
  private static final int[][] _Malayalam = make_Malayalam();
  private static int[][] make_Malayalam() {
    return new int[][] {};
  }
  private static final int[][] _Phags_Pa = make_Phags_Pa();
  private static int[][] make_Phags_Pa() {
    return new int[][] {};
  }
  private static final int[][] _Inscriptional_Parthian = make_Inscriptional_Parthian();
  private static int[][] make_Inscriptional_Parthian() {
    return new int[][] {};
  }
  private static final int[][] _Latin = make_Latin();
  private static int[][] make_Latin() {
    return new int[][] {};
  }
  private static final int[][] _Inscriptional_Pahlavi = make_Inscriptional_Pahlavi();
  private static int[][] make_Inscriptional_Pahlavi() {
    return new int[][] {};
  }
  private static final int[][] _Osmanya = make_Osmanya();
  private static int[][] make_Osmanya() {
    return new int[][] {};
  }
  private static final int[][] _Khmer = make_Khmer();
  private static int[][] make_Khmer() {
    return new int[][] {};
  }
  private static final int[][] _Inherited = make_Inherited();
  private static int[][] make_Inherited() {
    return new int[][] {};
  }
  private static final int[][] _Telugu = make_Telugu();
  private static int[][] make_Telugu() {
    return new int[][] {};
  }
  private static final int[][] _Samaritan = make_Samaritan();
  private static int[][] make_Samaritan() {
    return new int[][] {};
  }
  private static final int[][] _Bopomofo = make_Bopomofo();
  private static int[][] make_Bopomofo() {
    return new int[][] {};
  }
  private static final int[][] _Imperial_Aramaic = make_Imperial_Aramaic();
  private static int[][] make_Imperial_Aramaic() {
    return new int[][] {};
  }
  private static final int[][] _Kaithi = make_Kaithi();
  private static int[][] make_Kaithi() {
    return new int[][] {};
  }
  private static final int[][] _Mandaic = make_Mandaic();
  private static int[][] make_Mandaic() {
    return new int[][] {};
  }
  private static final int[][] _Old_South_Arabian = make_Old_South_Arabian();
  private static int[][] make_Old_South_Arabian() {
    return new int[][] {};
  }
  private static final int[][] _Kayah_Li = make_Kayah_Li();
  private static int[][] make_Kayah_Li() {
    return new int[][] {};
  }
  private static final int[][] _New_Tai_Lue = make_New_Tai_Lue();
  private static int[][] make_New_Tai_Lue() {
    return new int[][] {};
  }
  private static final int[][] _Tai_Le = make_Tai_Le();
  private static int[][] make_Tai_Le() {
    return new int[][] {};
  }
  private static final int[][] _Kharoshthi = make_Kharoshthi();
  private static int[][] make_Kharoshthi() {
    return new int[][] {};
  }
  private static final int[][] _Common = make_Common();
  private static int[][] make_Common() {
    return new int[][] {};
  }
  private static final int[][] _Kannada = make_Kannada();
  private static int[][] make_Kannada() {
    return new int[][] {};
  }
  private static final int[][] _Old_Turkic = make_Old_Turkic();
  private static int[][] make_Old_Turkic() {
    return new int[][] {};
  }
  private static final int[][] _Tamil = make_Tamil();
  private static int[][] make_Tamil() {
    return new int[][] {};
  }
  private static final int[][] _Tagalog = make_Tagalog();
  private static int[][] make_Tagalog() {
    return new int[][] {};
  }
  private static final int[][] _Brahmi = make_Brahmi();
  private static int[][] make_Brahmi() {
    return new int[][] {};
  }
  private static final int[][] _Arabic = make_Arabic();
  private static int[][] make_Arabic() {
    return new int[][] {};
  }
  private static final int[][] _Tagbanwa = make_Tagbanwa();
  private static int[][] make_Tagbanwa() {
    return new int[][] {};
  }
  private static final int[][] _Canadian_Aboriginal = make_Canadian_Aboriginal();
  private static int[][] make_Canadian_Aboriginal() {
    return new int[][] {};
  }
  private static final int[][] _Tibetan = make_Tibetan();
  private static int[][] make_Tibetan() {
    return new int[][] {};
  }
  private static final int[][] _Coptic = make_Coptic();
  private static int[][] make_Coptic() {
    return new int[][] {};
  }
  private static final int[][] _Hiragana = make_Hiragana();
  private static int[][] make_Hiragana() {
    return new int[][] {};
  }
  private static final int[][] _Limbu = make_Limbu();
  private static int[][] make_Limbu() {
    return new int[][] {};
  }
  private static final int[][] _Egyptian_Hieroglyphs = make_Egyptian_Hieroglyphs();
  private static int[][] make_Egyptian_Hieroglyphs() {
    return new int[][] {};
  }
  private static final int[][] _Avestan = make_Avestan();
  private static int[][] make_Avestan() {
    return new int[][] {};
  }
  private static final int[][] _Myanmar = make_Myanmar();
  private static int[][] make_Myanmar() {
    return new int[][] {};
  }
  private static final int[][] _Armenian = make_Armenian();
  private static int[][] make_Armenian() {
    return new int[][] {};
  }
  private static final int[][] _Sinhala = make_Sinhala();
  private static int[][] make_Sinhala() {
    return new int[][] {};
  }
  private static final int[][] _Bengali = make_Bengali();
  private static int[][] make_Bengali() {
    return new int[][] {};
  }
  private static final int[][] _Greek = make_Greek();
  private static int[][] make_Greek() {
    return new int[][] {};
  }
  private static final int[][] _Cham = make_Cham();
  private static int[][] make_Cham() {
    return new int[][] {};
  }
  private static final int[][] _Hebrew = make_Hebrew();
  private static int[][] make_Hebrew() {
    return new int[][] {};
  }
  private static final int[][] _Meetei_Mayek = make_Meetei_Mayek();
  private static int[][] make_Meetei_Mayek() {
    return new int[][] {};
  }
  private static final int[][] _Saurashtra = make_Saurashtra();
  private static int[][] make_Saurashtra() {
    return new int[][] {};
  }
  private static final int[][] _Hangul = make_Hangul();
  private static int[][] make_Hangul() {
    return new int[][] {};
  }
  private static final int[][] _Runic = make_Runic();
  private static int[][] make_Runic() {
    return new int[][] {};
  }
  private static final int[][] _Deseret = make_Deseret();
  private static int[][] make_Deseret() {
    return new int[][] {};
  }
  private static final int[][] _Lisu = make_Lisu();
  private static int[][] make_Lisu() {
    return new int[][] {};
  }
  private static final int[][] _Sundanese = make_Sundanese();
  private static int[][] make_Sundanese() {
    return new int[][] {};
  }
  private static final int[][] _Glagolitic = make_Glagolitic();
  private static int[][] make_Glagolitic() {
    return new int[][] {};
  }
  private static final int[][] _Oriya = make_Oriya();
  private static int[][] make_Oriya() {
    return new int[][] {};
  }
  private static final int[][] _Buhid = make_Buhid();
  private static int[][] make_Buhid() {
    return new int[][] {};
  }
  private static final int[][] _Ethiopic = make_Ethiopic();
  private static int[][] make_Ethiopic() {
    return new int[][] {};
  }
  private static final int[][] _Javanese = make_Javanese();
  private static int[][] make_Javanese() {
    return new int[][] {};
  }
  private static final int[][] _Syloti_Nagri = make_Syloti_Nagri();
  private static int[][] make_Syloti_Nagri() {
    return new int[][] {};
  }
  private static final int[][] _Vai = make_Vai();
  private static int[][] make_Vai() {
    return new int[][] {};
  }
  private static final int[][] _Cherokee = make_Cherokee();
  private static int[][] make_Cherokee() {
    return new int[][] {};
  }
  private static final int[][] _Ogham = make_Ogham();
  private static int[][] make_Ogham() {
    return new int[][] {};
  }
  private static final int[][] _Batak = make_Batak();
  private static int[][] make_Batak() {
    return new int[][] {};
  }
  private static final int[][] _Syriac = make_Syriac();
  private static int[][] make_Syriac() {
    return new int[][] {};
  }
  private static final int[][] _Gurmukhi = make_Gurmukhi();
  private static int[][] make_Gurmukhi() {
    return new int[][] {};
  }
  private static final int[][] _Tai_Tham = make_Tai_Tham();
  private static int[][] make_Tai_Tham() {
    return new int[][] {};
  }
  private static final int[][] _Ol_Chiki = make_Ol_Chiki();
  private static int[][] make_Ol_Chiki() {
    return new int[][] {};
  }
  private static final int[][] _Mongolian = make_Mongolian();
  private static int[][] make_Mongolian() {
    return new int[][] {};
  }
  private static final int[][] _Hanunoo = make_Hanunoo();
  private static int[][] make_Hanunoo() {
    return new int[][] {};
  }
  private static final int[][] _Cypriot = make_Cypriot();
  private static int[][] make_Cypriot() {
    return new int[][] {};
  }
  private static final int[][] _Buginese = make_Buginese();
  private static int[][] make_Buginese() {
    return new int[][] {};
  }
  private static final int[][] _Bamum = make_Bamum();
  private static int[][] make_Bamum() {
    return new int[][] {};
  }
  private static final int[][] _Lepcha = make_Lepcha();
  private static int[][] make_Lepcha() {
    return new int[][] {};
  }
  private static final int[][] _Thaana = make_Thaana();
  private static int[][] make_Thaana() {
    return new int[][] {};
  }
  private static final int[][] _Old_Persian = make_Old_Persian();
  private static int[][] make_Old_Persian() {
    return new int[][] {};
  }
  private static final int[][] _Cuneiform = make_Cuneiform();
  private static int[][] make_Cuneiform() {
    return new int[][] {};
  }
  private static final int[][] _Rejang = make_Rejang();
  private static int[][] make_Rejang() {
    return new int[][] {};
  }
  private static final int[][] _Georgian = make_Georgian();
  private static int[][] make_Georgian() {
    return new int[][] {};
  }
  private static final int[][] _Shavian = make_Shavian();
  private static int[][] make_Shavian() {
    return new int[][] {};
  }
  private static final int[][] _Lycian = make_Lycian();
  private static int[][] make_Lycian() {
    return new int[][] {};
  }
  private static final int[][] _Nko = make_Nko();
  private static int[][] make_Nko() {
    return new int[][] {};
  }
  private static final int[][] _Yi = make_Yi();
  private static int[][] make_Yi() {
    return new int[][] {};
  }
  private static final int[][] _Lao = make_Lao();
  private static int[][] make_Lao() {
    return new int[][] {};
  }
  private static final int[][] _Linear_B = make_Linear_B();
  private static int[][] make_Linear_B() {
    return new int[][] {};
  }
  private static final int[][] _Old_Italic = make_Old_Italic();
  private static int[][] make_Old_Italic() {
    return new int[][] {};
  }
  private static final int[][] _Tai_Viet = make_Tai_Viet();
  private static int[][] make_Tai_Viet() {
    return new int[][] {};
  }
  private static final int[][] _Devanagari = make_Devanagari();
  private static int[][] make_Devanagari() {
    return new int[][] {};
  }
  private static final int[][] _Lydian = make_Lydian();
  private static int[][] make_Lydian() {
    return new int[][] {};
  }
  private static final int[][] _Tifinagh = make_Tifinagh();
  private static int[][] make_Tifinagh() {
    return new int[][] {};
  }
  private static final int[][] _Ugaritic = make_Ugaritic();
  private static int[][] make_Ugaritic() {
    return new int[][] {};
  }
  private static final int[][] _Thai = make_Thai();
  private static int[][] make_Thai() {
    return new int[][] {};
  }
  private static final int[][] _Cyrillic = make_Cyrillic();
  private static int[][] make_Cyrillic() {
    return new int[][] {};
  }
  private static final int[][] _Gujarati = make_Gujarati();
  private static int[][] make_Gujarati() {
    return new int[][] {};
  }
  private static final int[][] _Carian = make_Carian();
  private static int[][] make_Carian() {
    return new int[][] {};
  }
  private static final int[][] _Phoenician = make_Phoenician();
  private static int[][] make_Phoenician() {
    return new int[][] {};
  }
  private static final int[][] _Balinese = make_Balinese();
  private static int[][] make_Balinese() {
    return new int[][] {};
  }
  private static final int[][] _Braille = make_Braille();
  private static int[][] make_Braille() {
    return new int[][] {};
  }
  private static final int[][] _Han = make_Han();
  private static int[][] make_Han() {
    return new int[][] {};
  }
  private static final int[][] _Gothic = make_Gothic();
  private static int[][] make_Gothic() {
    return new int[][] {};
  }
  static final int[][] Arabic = _Arabic;
  static final int[][] Armenian = _Armenian;
  static final int[][] Avestan = _Avestan;
  static final int[][] Balinese = _Balinese;
  static final int[][] Bamum = _Bamum;
  static final int[][] Batak = _Batak;
  static final int[][] Bengali = _Bengali;
  static final int[][] Bopomofo = _Bopomofo;
  static final int[][] Brahmi = _Brahmi;
  static final int[][] Braille = _Braille;
  static final int[][] Buginese = _Buginese;
  static final int[][] Buhid = _Buhid;
  static final int[][] Canadian_Aboriginal = _Canadian_Aboriginal;
  static final int[][] Carian = _Carian;
  static final int[][] Cham = _Cham;
  static final int[][] Cherokee = _Cherokee;
  static final int[][] Common = _Common;
  static final int[][] Coptic = _Coptic;
  static final int[][] Cuneiform = _Cuneiform;
  static final int[][] Cypriot = _Cypriot;
  static final int[][] Cyrillic = _Cyrillic;
  static final int[][] Deseret = _Deseret;
  static final int[][] Devanagari = _Devanagari;
  static final int[][] Egyptian_Hieroglyphs = _Egyptian_Hieroglyphs;
  static final int[][] Ethiopic = _Ethiopic;
  static final int[][] Georgian = _Georgian;
  static final int[][] Glagolitic = _Glagolitic;
  static final int[][] Gothic = _Gothic;
  static final int[][] Greek = _Greek;
  static final int[][] Gujarati = _Gujarati;
  static final int[][] Gurmukhi = _Gurmukhi;
  static final int[][] Han = _Han;
  static final int[][] Hangul = _Hangul;
  static final int[][] Hanunoo = _Hanunoo;
  static final int[][] Hebrew = _Hebrew;
  static final int[][] Hiragana = _Hiragana;
  static final int[][] Imperial_Aramaic = _Imperial_Aramaic;
  static final int[][] Inherited = _Inherited;
  static final int[][] Inscriptional_Pahlavi = _Inscriptional_Pahlavi;
  static final int[][] Inscriptional_Parthian = _Inscriptional_Parthian;
  static final int[][] Javanese = _Javanese;
  static final int[][] Kaithi = _Kaithi;
  static final int[][] Kannada = _Kannada;
  static final int[][] Katakana = _Katakana;
  static final int[][] Kayah_Li = _Kayah_Li;
  static final int[][] Kharoshthi = _Kharoshthi;
  static final int[][] Khmer = _Khmer;
  static final int[][] Lao = _Lao;
  static final int[][] Latin = _Latin;
  static final int[][] Lepcha = _Lepcha;
  static final int[][] Limbu = _Limbu;
  static final int[][] Linear_B = _Linear_B;
  static final int[][] Lisu = _Lisu;
  static final int[][] Lycian = _Lycian;
  static final int[][] Lydian = _Lydian;
  static final int[][] Malayalam = _Malayalam;
  static final int[][] Mandaic = _Mandaic;
  static final int[][] Meetei_Mayek = _Meetei_Mayek;
  static final int[][] Mongolian = _Mongolian;
  static final int[][] Myanmar = _Myanmar;
  static final int[][] New_Tai_Lue = _New_Tai_Lue;
  static final int[][] Nko = _Nko;
  static final int[][] Ogham = _Ogham;
  static final int[][] Ol_Chiki = _Ol_Chiki;
  static final int[][] Old_Italic = _Old_Italic;
  static final int[][] Old_Persian = _Old_Persian;
  static final int[][] Old_South_Arabian = _Old_South_Arabian;
  static final int[][] Old_Turkic = _Old_Turkic;
  static final int[][] Oriya = _Oriya;
  static final int[][] Osmanya = _Osmanya;
  static final int[][] Phags_Pa = _Phags_Pa;
  static final int[][] Phoenician = _Phoenician;
  static final int[][] Rejang = _Rejang;
  static final int[][] Runic = _Runic;
  static final int[][] Samaritan = _Samaritan;
  static final int[][] Saurashtra = _Saurashtra;
  static final int[][] Shavian = _Shavian;
  static final int[][] Sinhala = _Sinhala;
  static final int[][] Sundanese = _Sundanese;
  static final int[][] Syloti_Nagri = _Syloti_Nagri;
  static final int[][] Syriac = _Syriac;
  static final int[][] Tagalog = _Tagalog;
  static final int[][] Tagbanwa = _Tagbanwa;
  static final int[][] Tai_Le = _Tai_Le;
  static final int[][] Tai_Tham = _Tai_Tham;
  static final int[][] Tai_Viet = _Tai_Viet;
  static final int[][] Tamil = _Tamil;
  static final int[][] Telugu = _Telugu;
  static final int[][] Thaana = _Thaana;
  static final int[][] Thai = _Thai;
  static final int[][] Tibetan = _Tibetan;
  static final int[][] Tifinagh = _Tifinagh;
  static final int[][] Ugaritic = _Ugaritic;
  static final int[][] Vai = _Vai;
  static final int[][] Yi = _Yi;
  private static Map<String, int[][]> Properties() {
    Map<String, int[][]> map = new HashMap<String, int[][]>();
    map.put("Pattern_Syntax", Pattern_Syntax);
    map.put("Other_ID_Start", Other_ID_Start);
    map.put("Pattern_White_Space", Pattern_White_Space);
    map.put("Other_Lowercase", Other_Lowercase);
    map.put("Soft_Dotted", Soft_Dotted);
    map.put("Hex_Digit", Hex_Digit);
    map.put("ASCII_Hex_Digit", ASCII_Hex_Digit);
    map.put("Deprecated", Deprecated);
    map.put("Terminal_Punctuation", Terminal_Punctuation);
    map.put("Quotation_Mark", Quotation_Mark);
    map.put("Other_ID_Continue", Other_ID_Continue);
    map.put("Bidi_Control", Bidi_Control);
    map.put("Variation_Selector", Variation_Selector);
    map.put("Noncharacter_Code_Point", Noncharacter_Code_Point);
    map.put("Other_Math", Other_Math);
    map.put("Unified_Ideograph", Unified_Ideograph);
    map.put("Hyphen", Hyphen);
    map.put("IDS_Binary_Operator", IDS_Binary_Operator);
    map.put("Logical_Order_Exception", Logical_Order_Exception);
    map.put("Radical", Radical);
    map.put("Other_Uppercase", Other_Uppercase);
    map.put("STerm", STerm);
    map.put("Other_Alphabetic", Other_Alphabetic);
    map.put("Diacritic", Diacritic);
    map.put("Extender", Extender);
    map.put("Join_Control", Join_Control);
    map.put("Ideographic", Ideographic);
    map.put("Dash", Dash);
    map.put("IDS_Trinary_Operator", IDS_Trinary_Operator);
    map.put("Other_Grapheme_Extend", Other_Grapheme_Extend);
    map.put("Other_Default_Ignorable_Code_Point", Other_Default_Ignorable_Code_Point);
    map.put("White_Space", White_Space);
    return map;
  }
  private static final int[][] _Pattern_Syntax = make_Pattern_Syntax();
  private static int[][] make_Pattern_Syntax() {
    return new int[][] {};
  }
  private static final int[][] _Other_ID_Start = make_Other_ID_Start();
  private static int[][] make_Other_ID_Start() {
    return new int[][] {};
  }
  private static final int[][] _Pattern_White_Space = make_Pattern_White_Space();
  private static int[][] make_Pattern_White_Space() {
    return new int[][] {};
  }
  private static final int[][] _Other_Lowercase = make_Other_Lowercase();
  private static int[][] make_Other_Lowercase() {
    return new int[][] {};
  }
  private static final int[][] _Soft_Dotted = make_Soft_Dotted();
  private static int[][] make_Soft_Dotted() {
    return new int[][] {};
  }
  private static final int[][] _Hex_Digit = make_Hex_Digit();
  private static int[][] make_Hex_Digit() {
    return new int[][] {};
  }
  private static final int[][] _ASCII_Hex_Digit = make_ASCII_Hex_Digit();
  private static int[][] make_ASCII_Hex_Digit() {
    return new int[][] {};
  }
  private static final int[][] _Deprecated = make_Deprecated();
  private static int[][] make_Deprecated() {
    return new int[][] {};
  }
  private static final int[][] _Terminal_Punctuation = make_Terminal_Punctuation();
  private static int[][] make_Terminal_Punctuation() {
    return new int[][] {};
  }
  private static final int[][] _Quotation_Mark = make_Quotation_Mark();
  private static int[][] make_Quotation_Mark() {
    return new int[][] {};
  }
  private static final int[][] _Other_ID_Continue = make_Other_ID_Continue();
  private static int[][] make_Other_ID_Continue() {
    return new int[][] {};
  }
  private static final int[][] _Bidi_Control = make_Bidi_Control();
  private static int[][] make_Bidi_Control() {
    return new int[][] {};
  }
  private static final int[][] _Variation_Selector = make_Variation_Selector();
  private static int[][] make_Variation_Selector() {
    return new int[][] {};
  }
  private static final int[][] _Noncharacter_Code_Point = make_Noncharacter_Code_Point();
  private static int[][] make_Noncharacter_Code_Point() {
    return new int[][] {};
  }
  private static final int[][] _Other_Math = make_Other_Math();
  private static int[][] make_Other_Math() {
    return new int[][] {};
  }
  private static final int[][] _Unified_Ideograph = make_Unified_Ideograph();
  private static int[][] make_Unified_Ideograph() {
    return new int[][] {};
  }
  private static final int[][] _Hyphen = make_Hyphen();
  private static int[][] make_Hyphen() {
    return new int[][] {};
  }
  private static final int[][] _IDS_Binary_Operator = make_IDS_Binary_Operator();
  private static int[][] make_IDS_Binary_Operator() {
    return new int[][] {};
  }
  private static final int[][] _Logical_Order_Exception = make_Logical_Order_Exception();
  private static int[][] make_Logical_Order_Exception() {
    return new int[][] {};
  }
  private static final int[][] _Radical = make_Radical();
  private static int[][] make_Radical() {
    return new int[][] {};
  }
  private static final int[][] _Other_Uppercase = make_Other_Uppercase();
  private static int[][] make_Other_Uppercase() {
    return new int[][] {};
  }
  private static final int[][] _STerm = make_STerm();
  private static int[][] make_STerm() {
    return new int[][] {};
  }
  private static final int[][] _Other_Alphabetic = make_Other_Alphabetic();
  private static int[][] make_Other_Alphabetic() {
    return new int[][] {};
  }
  private static final int[][] _Diacritic = make_Diacritic();
  private static int[][] make_Diacritic() {
    return new int[][] {};
  }
  private static final int[][] _Extender = make_Extender();
  private static int[][] make_Extender() {
    return new int[][] {};
  }
  private static final int[][] _Join_Control = make_Join_Control();
  private static int[][] make_Join_Control() {
    return new int[][] {};
  }
  private static final int[][] _Ideographic = make_Ideographic();
  private static int[][] make_Ideographic() {
    return new int[][] {};
  }
  private static final int[][] _Dash = make_Dash();
  private static int[][] make_Dash() {
    return new int[][] {};
  }
  private static final int[][] _IDS_Trinary_Operator = make_IDS_Trinary_Operator();
  private static int[][] make_IDS_Trinary_Operator() {
    return new int[][] {};
  }
  private static final int[][] _Other_Grapheme_Extend = make_Other_Grapheme_Extend();
  private static int[][] make_Other_Grapheme_Extend() {
    return new int[][] {};
  }
  private static final int[][] _Other_Default_Ignorable_Code_Point = make_Other_Default_Ignorable_Code_Point();
  private static int[][] make_Other_Default_Ignorable_Code_Point() {
    return new int[][] {};
  }
  private static final int[][] _White_Space = make_White_Space();
  private static int[][] make_White_Space() {
    return new int[][] {};
  }
  static final int[][] ASCII_Hex_Digit = _ASCII_Hex_Digit;
  static final int[][] Bidi_Control = _Bidi_Control;
  static final int[][] Dash = _Dash;
  static final int[][] Deprecated = _Deprecated;
  static final int[][] Diacritic = _Diacritic;
  static final int[][] Extender = _Extender;
  static final int[][] Hex_Digit = _Hex_Digit;
  static final int[][] Hyphen = _Hyphen;
  static final int[][] IDS_Binary_Operator = _IDS_Binary_Operator;
  static final int[][] IDS_Trinary_Operator = _IDS_Trinary_Operator;
  static final int[][] Ideographic = _Ideographic;
  static final int[][] Join_Control = _Join_Control;
  static final int[][] Logical_Order_Exception = _Logical_Order_Exception;
  static final int[][] Noncharacter_Code_Point = _Noncharacter_Code_Point;
  static final int[][] Other_Alphabetic = _Other_Alphabetic;
  static final int[][] Other_Default_Ignorable_Code_Point = _Other_Default_Ignorable_Code_Point;
  static final int[][] Other_Grapheme_Extend = _Other_Grapheme_Extend;
  static final int[][] Other_ID_Continue = _Other_ID_Continue;
  static final int[][] Other_ID_Start = _Other_ID_Start;
  static final int[][] Other_Lowercase = _Other_Lowercase;
  static final int[][] Other_Math = _Other_Math;
  static final int[][] Other_Uppercase = _Other_Uppercase;
  static final int[][] Pattern_Syntax = _Pattern_Syntax;
  static final int[][] Pattern_White_Space = _Pattern_White_Space;
  static final int[][] Quotation_Mark = _Quotation_Mark;
  static final int[][] Radical = _Radical;
  static final int[][] STerm = _STerm;
  static final int[][] Soft_Dotted = _Soft_Dotted;
  static final int[][] Terminal_Punctuation = _Terminal_Punctuation;
  static final int[][] Unified_Ideograph = _Unified_Ideograph;
  static final int[][] Variation_Selector = _Variation_Selector;
  static final int[][] White_Space = _White_Space;
  static final int[][] CASE_RANGES = {
	{0x0041, 0x005A, 0, 32, 0},
	{0x0061, 0x007A, -32, 0, -32},
	{0x00B5, 0x00B5, 743, 0, 743},
	{0x00C0, 0x00D6, 0, 32, 0},
	{0x00D8, 0x00DE, 0, 32, 0},
	{0x00E0, 0x00F6, -32, 0, -32},
	{0x00F8, 0x00FE, -32, 0, -32},
	{0x00FF, 0x00FF, 121, 0, 121},
	{0x0100, 0x012F, UpperLower, UpperLower, UpperLower},
	{0x0130, 0x0130, 0, -199, 0},
	{0x0131, 0x0131, -232, 0, -232},
	{0x0132, 0x0137, UpperLower, UpperLower, UpperLower},
	{0x0139, 0x0148, UpperLower, UpperLower, UpperLower},
	{0x014A, 0x0177, UpperLower, UpperLower, UpperLower},
	{0x0178, 0x0178, 0, -121, 0},
	{0x0179, 0x017E, UpperLower, UpperLower, UpperLower},
	{0x017F, 0x017F, -300, 0, -300},
	{0x0180, 0x0180, 195, 0, 195},
	{0x0181, 0x0181, 0, 210, 0},
	{0x0182, 0x0185, UpperLower, UpperLower, UpperLower},
	{0x0186, 0x0186, 0, 206, 0},
	{0x0187, 0x0188, UpperLower, UpperLower, UpperLower},
	{0x0189, 0x018A, 0, 205, 0},
	{0x018B, 0x018C, UpperLower, UpperLower, UpperLower},
	{0x018E, 0x018E, 0, 79, 0},
	{0x018F, 0x018F, 0, 202, 0},
	{0x0190, 0x0190, 0, 203, 0},
	{0x0191, 0x0192, UpperLower, UpperLower, UpperLower},
	{0x0193, 0x0193, 0, 205, 0},
	{0x0194, 0x0194, 0, 207, 0},
	{0x0195, 0x0195, 97, 0, 97},
	{0x0196, 0x0196, 0, 211, 0},
	{0x0197, 0x0197, 0, 209, 0},
	{0x0198, 0x0199, UpperLower, UpperLower, UpperLower},
	{0x019A, 0x019A, 163, 0, 163},
	{0x019C, 0x019C, 0, 211, 0},
	{0x019D, 0x019D, 0, 213, 0},
	{0x019E, 0x019E, 130, 0, 130},
	{0x019F, 0x019F, 0, 214, 0},
	{0x01A0, 0x01A5, UpperLower, UpperLower, UpperLower},
	{0x01A6, 0x01A6, 0, 218, 0},
	{0x01A7, 0x01A8, UpperLower, UpperLower, UpperLower},
	{0x01A9, 0x01A9, 0, 218, 0},
	{0x01AC, 0x01AD, UpperLower, UpperLower, UpperLower},
	{0x01AE, 0x01AE, 0, 218, 0},
	{0x01AF, 0x01B0, UpperLower, UpperLower, UpperLower},
	{0x01B1, 0x01B2, 0, 217, 0},
	{0x01B3, 0x01B6, UpperLower, UpperLower, UpperLower},
	{0x01B7, 0x01B7, 0, 219, 0},
	{0x01B8, 0x01B9, UpperLower, UpperLower, UpperLower},
	{0x01BC, 0x01BD, UpperLower, UpperLower, UpperLower},
	{0x01BF, 0x01BF, 56, 0, 56},
	{0x01C4, 0x01C4, 0, 2, 1},
	{0x01C5, 0x01C5, -1, 1, 0},
	{0x01C6, 0x01C6, -2, 0, -1},
	{0x01C7, 0x01C7, 0, 2, 1},
	{0x01C8, 0x01C8, -1, 1, 0},
	{0x01C9, 0x01C9, -2, 0, -1},
	{0x01CA, 0x01CA, 0, 2, 1},
	{0x01CB, 0x01CB, -1, 1, 0},
	{0x01CC, 0x01CC, -2, 0, -1},
	{0x01CD, 0x01DC, UpperLower, UpperLower, UpperLower},
	{0x01DD, 0x01DD, -79, 0, -79},
	{0x01DE, 0x01EF, UpperLower, UpperLower, UpperLower},
	{0x01F1, 0x01F1, 0, 2, 1},
	{0x01F2, 0x01F2, -1, 1, 0},
	{0x01F3, 0x01F3, -2, 0, -1},
	{0x01F4, 0x01F5, UpperLower, UpperLower, UpperLower},
	{0x01F6, 0x01F6, 0, -97, 0},
	{0x01F7, 0x01F7, 0, -56, 0},
	{0x01F8, 0x021F, UpperLower, UpperLower, UpperLower},
	{0x0220, 0x0220, 0, -130, 0},
	{0x0222, 0x0233, UpperLower, UpperLower, UpperLower},
	{0x023A, 0x023A, 0, 10795, 0},
	{0x023B, 0x023C, UpperLower, UpperLower, UpperLower},
	{0x023D, 0x023D, 0, -163, 0},
	{0x023E, 0x023E, 0, 10792, 0},
	{0x023F, 0x0240, 10815, 0, 10815},
	{0x0241, 0x0242, UpperLower, UpperLower, UpperLower},
	{0x0243, 0x0243, 0, -195, 0},
	{0x0244, 0x0244, 0, 69, 0},
	{0x0245, 0x0245, 0, 71, 0},
	{0x0246, 0x024F, UpperLower, UpperLower, UpperLower},
	{0x0250, 0x0250, 10783, 0, 10783},
	{0x0251, 0x0251, 10780, 0, 10780},
	{0x0252, 0x0252, 10782, 0, 10782},
	{0x0253, 0x0253, -210, 0, -210},
	{0x0254, 0x0254, -206, 0, -206},
	{0x0256, 0x0257, -205, 0, -205},
	{0x0259, 0x0259, -202, 0, -202},
	{0x025B, 0x025B, -203, 0, -203},
	{0x0260, 0x0260, -205, 0, -205},
	{0x0263, 0x0263, -207, 0, -207},
	{0x0265, 0x0265, 42280, 0, 42280},
	{0x0268, 0x0268, -209, 0, -209},
	{0x0269, 0x0269, -211, 0, -211},
	{0x026B, 0x026B, 10743, 0, 10743},
	{0x026F, 0x026F, -211, 0, -211},
	{0x0271, 0x0271, 10749, 0, 10749},
	{0x0272, 0x0272, -213, 0, -213},
	{0x0275, 0x0275, -214, 0, -214},
	{0x027D, 0x027D, 10727, 0, 10727},
	{0x0280, 0x0280, -218, 0, -218},
	{0x0283, 0x0283, -218, 0, -218},
	{0x0288, 0x0288, -218, 0, -218},
	{0x0289, 0x0289, -69, 0, -69},
	{0x028A, 0x028B, -217, 0, -217},
	{0x028C, 0x028C, -71, 0, -71},
	{0x0292, 0x0292, -219, 0, -219},
	{0x0345, 0x0345, 84, 0, 84},
	{0x0370, 0x0373, UpperLower, UpperLower, UpperLower},
	{0x0376, 0x0377, UpperLower, UpperLower, UpperLower},
	{0x037B, 0x037D, 130, 0, 130},
	{0x0386, 0x0386, 0, 38, 0},
	{0x0388, 0x038A, 0, 37, 0},
	{0x038C, 0x038C, 0, 64, 0},
	{0x038E, 0x038F, 0, 63, 0},
	{0x0391, 0x03A1, 0, 32, 0},
	{0x03A3, 0x03AB, 0, 32, 0},
	{0x03AC, 0x03AC, -38, 0, -38},
	{0x03AD, 0x03AF, -37, 0, -37},
	{0x03B1, 0x03C1, -32, 0, -32},
	{0x03C2, 0x03C2, -31, 0, -31},
	{0x03C3, 0x03CB, -32, 0, -32},
	{0x03CC, 0x03CC, -64, 0, -64},
	{0x03CD, 0x03CE, -63, 0, -63},
	{0x03CF, 0x03CF, 0, 8, 0},
	{0x03D0, 0x03D0, -62, 0, -62},
	{0x03D1, 0x03D1, -57, 0, -57},
	{0x03D5, 0x03D5, -47, 0, -47},
	{0x03D6, 0x03D6, -54, 0, -54},
	{0x03D7, 0x03D7, -8, 0, -8},
	{0x03D8, 0x03EF, UpperLower, UpperLower, UpperLower},
	{0x03F0, 0x03F0, -86, 0, -86},
	{0x03F1, 0x03F1, -80, 0, -80},
	{0x03F2, 0x03F2, 7, 0, 7},
	{0x03F4, 0x03F4, 0, -60, 0},
	{0x03F5, 0x03F5, -96, 0, -96},
	{0x03F7, 0x03F8, UpperLower, UpperLower, UpperLower},
	{0x03F9, 0x03F9, 0, -7, 0},
	{0x03FA, 0x03FB, UpperLower, UpperLower, UpperLower},
	{0x03FD, 0x03FF, 0, -130, 0},
	{0x0400, 0x040F, 0, 80, 0},
	{0x0410, 0x042F, 0, 32, 0},
	{0x0430, 0x044F, -32, 0, -32},
	{0x0450, 0x045F, -80, 0, -80},
	{0x0460, 0x0481, UpperLower, UpperLower, UpperLower},
	{0x048A, 0x04BF, UpperLower, UpperLower, UpperLower},
	{0x04C0, 0x04C0, 0, 15, 0},
	{0x04C1, 0x04CE, UpperLower, UpperLower, UpperLower},
	{0x04CF, 0x04CF, -15, 0, -15},
	{0x04D0, 0x0527, UpperLower, UpperLower, UpperLower},
	{0x0531, 0x0556, 0, 48, 0},
	{0x0561, 0x0586, -48, 0, -48},
	{0x10A0, 0x10C5, 0, 7264, 0},
	{0x1D79, 0x1D79, 35332, 0, 35332},
	{0x1D7D, 0x1D7D, 3814, 0, 3814},
	{0x1E00, 0x1E95, UpperLower, UpperLower, UpperLower},
	{0x1E9B, 0x1E9B, -59, 0, -59},
	{0x1E9E, 0x1E9E, 0, -7615, 0},
	{0x1EA0, 0x1EFF, UpperLower, UpperLower, UpperLower},
	{0x1F00, 0x1F07, 8, 0, 8},
	{0x1F08, 0x1F0F, 0, -8, 0},
	{0x1F10, 0x1F15, 8, 0, 8},
	{0x1F18, 0x1F1D, 0, -8, 0},
	{0x1F20, 0x1F27, 8, 0, 8},
	{0x1F28, 0x1F2F, 0, -8, 0},
	{0x1F30, 0x1F37, 8, 0, 8},
	{0x1F38, 0x1F3F, 0, -8, 0},
	{0x1F40, 0x1F45, 8, 0, 8},
	{0x1F48, 0x1F4D, 0, -8, 0},
	{0x1F51, 0x1F51, 8, 0, 8},
	{0x1F53, 0x1F53, 8, 0, 8},
	{0x1F55, 0x1F55, 8, 0, 8},
	{0x1F57, 0x1F57, 8, 0, 8},
	{0x1F59, 0x1F59, 0, -8, 0},
	{0x1F5B, 0x1F5B, 0, -8, 0},
	{0x1F5D, 0x1F5D, 0, -8, 0},
	{0x1F5F, 0x1F5F, 0, -8, 0},
	{0x1F60, 0x1F67, 8, 0, 8},
	{0x1F68, 0x1F6F, 0, -8, 0},
	{0x1F70, 0x1F71, 74, 0, 74},
	{0x1F72, 0x1F75, 86, 0, 86},
	{0x1F76, 0x1F77, 100, 0, 100},
	{0x1F78, 0x1F79, 128, 0, 128},
	{0x1F7A, 0x1F7B, 112, 0, 112},
	{0x1F7C, 0x1F7D, 126, 0, 126},
	{0x1F80, 0x1F87, 8, 0, 8},
	{0x1F88, 0x1F8F, 0, -8, 0},
	{0x1F90, 0x1F97, 8, 0, 8},
	{0x1F98, 0x1F9F, 0, -8, 0},
	{0x1FA0, 0x1FA7, 8, 0, 8},
	{0x1FA8, 0x1FAF, 0, -8, 0},
	{0x1FB0, 0x1FB1, 8, 0, 8},
	{0x1FB3, 0x1FB3, 9, 0, 9},
	{0x1FB8, 0x1FB9, 0, -8, 0},
	{0x1FBA, 0x1FBB, 0, -74, 0},
	{0x1FBC, 0x1FBC, 0, -9, 0},
	{0x1FBE, 0x1FBE, -7205, 0, -7205},
	{0x1FC3, 0x1FC3, 9, 0, 9},
	{0x1FC8, 0x1FCB, 0, -86, 0},
	{0x1FCC, 0x1FCC, 0, -9, 0},
	{0x1FD0, 0x1FD1, 8, 0, 8},
	{0x1FD8, 0x1FD9, 0, -8, 0},
	{0x1FDA, 0x1FDB, 0, -100, 0},
	{0x1FE0, 0x1FE1, 8, 0, 8},
	{0x1FE5, 0x1FE5, 7, 0, 7},
	{0x1FE8, 0x1FE9, 0, -8, 0},
	{0x1FEA, 0x1FEB, 0, -112, 0},
	{0x1FEC, 0x1FEC, 0, -7, 0},
	{0x1FF3, 0x1FF3, 9, 0, 9},
	{0x1FF8, 0x1FF9, 0, -128, 0},
	{0x1FFA, 0x1FFB, 0, -126, 0},
	{0x1FFC, 0x1FFC, 0, -9, 0},
	{0x2126, 0x2126, 0, -7517, 0},
	{0x212A, 0x212A, 0, -8383, 0},
	{0x212B, 0x212B, 0, -8262, 0},
	{0x2132, 0x2132, 0, 28, 0},
	{0x214E, 0x214E, -28, 0, -28},
	{0x2160, 0x216F, 0, 16, 0},
	{0x2170, 0x217F, -16, 0, -16},
	{0x2183, 0x2184, UpperLower, UpperLower, UpperLower},
	{0x24B6, 0x24CF, 0, 26, 0},
	{0x24D0, 0x24E9, -26, 0, -26},
	{0x2C00, 0x2C2E, 0, 48, 0},
	{0x2C30, 0x2C5E, -48, 0, -48},
	{0x2C60, 0x2C61, UpperLower, UpperLower, UpperLower},
	{0x2C62, 0x2C62, 0, -10743, 0},
	{0x2C63, 0x2C63, 0, -3814, 0},
	{0x2C64, 0x2C64, 0, -10727, 0},
	{0x2C65, 0x2C65, -10795, 0, -10795},
	{0x2C66, 0x2C66, -10792, 0, -10792},
	{0x2C67, 0x2C6C, UpperLower, UpperLower, UpperLower},
	{0x2C6D, 0x2C6D, 0, -10780, 0},
	{0x2C6E, 0x2C6E, 0, -10749, 0},
	{0x2C6F, 0x2C6F, 0, -10783, 0},
	{0x2C70, 0x2C70, 0, -10782, 0},
	{0x2C72, 0x2C73, UpperLower, UpperLower, UpperLower},
	{0x2C75, 0x2C76, UpperLower, UpperLower, UpperLower},
	{0x2C7E, 0x2C7F, 0, -10815, 0},
	{0x2C80, 0x2CE3, UpperLower, UpperLower, UpperLower},
	{0x2CEB, 0x2CEE, UpperLower, UpperLower, UpperLower},
	{0x2D00, 0x2D25, -7264, 0, -7264},
	{0xA640, 0xA66D, UpperLower, UpperLower, UpperLower},
	{0xA680, 0xA697, UpperLower, UpperLower, UpperLower},
	{0xA722, 0xA72F, UpperLower, UpperLower, UpperLower},
	{0xA732, 0xA76F, UpperLower, UpperLower, UpperLower},
	{0xA779, 0xA77C, UpperLower, UpperLower, UpperLower},
	{0xA77D, 0xA77D, 0, -35332, 0},
	{0xA77E, 0xA787, UpperLower, UpperLower, UpperLower},
	{0xA78B, 0xA78C, UpperLower, UpperLower, UpperLower},
	{0xA78D, 0xA78D, 0, -42280, 0},
	{0xA790, 0xA791, UpperLower, UpperLower, UpperLower},
	{0xA7A0, 0xA7A9, UpperLower, UpperLower, UpperLower},
	{0xFF21, 0xFF3A, 0, 32, 0},
	{0xFF41, 0xFF5A, -32, 0, -32},
	{0x10400, 0x10427, 0, 40, 0},
	{0x10428, 0x1044F, -40, 0, -40},
  };
  static final int[][] CASE_ORBIT = {
	{0x004B, 0x006B},
	{0x0053, 0x0073},
	{0x006B, 0x212A},
	{0x0073, 0x017F},
	{0x00B5, 0x039C},
	{0x00C5, 0x00E5},
	{0x00DF, 0x1E9E},
	{0x00E5, 0x212B},
	{0x0130, 0x0130},
	{0x0131, 0x0131},
	{0x017F, 0x0053},
	{0x01C4, 0x01C5},
	{0x01C5, 0x01C6},
	{0x01C6, 0x01C4},
	{0x01C7, 0x01C8},
	{0x01C8, 0x01C9},
	{0x01C9, 0x01C7},
	{0x01CA, 0x01CB},
	{0x01CB, 0x01CC},
	{0x01CC, 0x01CA},
	{0x01F1, 0x01F2},
	{0x01F2, 0x01F3},
	{0x01F3, 0x01F1},
	{0x0345, 0x0399},
	{0x0392, 0x03B2},
	{0x0395, 0x03B5},
	{0x0398, 0x03B8},
	{0x0399, 0x03B9},
	{0x039A, 0x03BA},
	{0x039C, 0x03BC},
	{0x03A0, 0x03C0},
	{0x03A1, 0x03C1},
	{0x03A3, 0x03C2},
	{0x03A6, 0x03C6},
	{0x03A9, 0x03C9},
	{0x03B2, 0x03D0},
	{0x03B5, 0x03F5},
	{0x03B8, 0x03D1},
	{0x03B9, 0x1FBE},
	{0x03BA, 0x03F0},
	{0x03BC, 0x00B5},
	{0x03C0, 0x03D6},
	{0x03C1, 0x03F1},
	{0x03C2, 0x03C3},
	{0x03C3, 0x03A3},
	{0x03C6, 0x03D5},
	{0x03C9, 0x2126},
	{0x03D0, 0x0392},
	{0x03D1, 0x03F4},
	{0x03D5, 0x03A6},
	{0x03D6, 0x03A0},
	{0x03F0, 0x039A},
	{0x03F1, 0x03A1},
	{0x03F4, 0x0398},
	{0x03F5, 0x0395},
	{0x1E60, 0x1E61},
	{0x1E61, 0x1E9B},
	{0x1E9B, 0x1E60},
	{0x1E9E, 0x00DF},
	{0x1FBE, 0x0345},
	{0x2126, 0x03A9},
	{0x212A, 0x004B},
	{0x212B, 0x00C5},
  };
  private static Map<String, int[][]> FoldCategory() {
    Map<String, int[][]> map = new HashMap<String, int[][]>();
    map.put("Ll", foldLl);
    map.put("Inherited", foldInherited);
    map.put("M", foldM);
    map.put("L", foldL);
    map.put("Mn", foldMn);
    map.put("Common", foldCommon);
    map.put("Greek", foldGreek);
    map.put("Lu", foldLu);
    map.put("Lt", foldLt);
    return map;
  }
  private static final int[][] foldLl = makefoldLl();
  private static int[][] makefoldLl() {
    return new int[][] {};
  }
  private static final int[][] foldInherited = makefoldInherited();
  private static int[][] makefoldInherited() {
    return new int[][] {};
  }
  private static final int[][] foldM = makefoldM();
  private static int[][] makefoldM() {
    return new int[][] {};
  }
  private static final int[][] foldL = makefoldL();
  private static int[][] makefoldL() {
    return new int[][] {};
  }
  private static final int[][] foldMn = makefoldMn();
  private static int[][] makefoldMn() {
    return new int[][] {};
  }
  private static final int[][] foldCommon = makefoldCommon();
  private static int[][] makefoldCommon() {
    return new int[][] {};
  }
  private static final int[][] foldGreek = makefoldGreek();
  private static int[][] makefoldGreek() {
    return new int[][] {};
  }
  private static final int[][] foldLu = makefoldLu();
  private static int[][] makefoldLu() {
    return new int[][] {};
  }
  private static final int[][] foldLt = makefoldLt();
  private static int[][] makefoldLt() {
    return new int[][] {};
  }
  private static Map<String, int[][]> FoldScript() {
    return new HashMap<String, int[][]>();
  }
  static final Map<String, int[][]> CATEGORIES = Categories();
  static final Map<String, int[][]> SCRIPTS    = Scripts();
  static final Map<String, int[][]> PROPERTIES = Properties();
  static final Map<String, int[][]> FOLD_CATEGORIES = FoldCategory();
  static final Map<String, int[][]> FOLD_SCRIPT = FoldScript();
// Fold orbit bytes: 63 pairs, 252 bytes
  private UnicodeTables() {}  // uninstantiable
}
